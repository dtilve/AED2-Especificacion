TAD D_agentes es Diccionario(nat,tupla(pos,nat,nat))
TAD Pos es tupla (nat,nat)

TAD AS’s
	Generos
		altaSeguridad
	
	Igualdad observacional
		(/forall a,a': altaSeguridad) ( a =obs a' \Leftrightarrow 
			(
			rastrillaje(a) =obs rastrillaje(a') ^l 
			obtenerAgentes(a) =obs obtenerAgentes(a') ^
			posicionEstudiantes(a) =obs posicionEstudiantes(a') ^
			posicionHippies(a) =obs posicionHippies(a')
			))
	
	Usa
		nat, bool, conjunto, pos
	
	Exporta
		altaSeguridad, generadores, observadores
	
	Observadores basicos
		obtenerAgentes:	altaSeguridad a -> d_agentes 
		posicionEstudiantes: altaSeguridad a -> conj(pos)
		posicionHippies: altaSeguridad a -> conj(pos)
		rastrillaje: altaSeguridad a -> rastrillaje
		
	Generadores
		iniciar: rastrillaje r x d_agentes d -> altaSeguridad			{(\forall c: Nat) (c \in claves(d) ^ pi_2(obtener(c,d) == 0 ^ pi_3(obtener(c,d) == 0 ^ pi_1(obtener(c,d)) \in libres(r) ^ (\forall c': Nat) (c' \in claves(d)-{c} ^ ¬(pi_1(obtener(c,d)) == pi_1(obtener(c',d)))))}
		ingresarEstudiante: altaSeguridad a x pos p -> altaSeguridad		{p \in disponibles(a) ^ posIngreso(a,p)}
		ingresarHippie: altaSeguridad a x pos p -> altaSeguridad		{p \in disponibles(a) ^ posIngreso(a,p)}
		moverEstudiante: altaSeguridad a x pos pi x pos pf-> altaSeguridad a2	{pi \in posicionEstudiantes(a) ^ (pf \in movimientosPosibles(a,pi) v puedeSalir(a,pi,pf))}
		moverHippie: altaSeguridad a x pos pi -> altaseguridad a2		{pi \in posicionHippies(a) ^ not vacio?(movimientosPosibles(a,pi))}
		moverAS: altaseguridad a x nat id -> altaseguridad a2			{id \in claves(obtenerAgentes(a)) ^ not vacio?(movimientosPosibles(a,posicionDeAgente(a,id))) ^ sancionesDeAgente(a,id) <= 3}
	
	
	Otras operaciones
		#estudiantes: altaSeguridad a -> nat
		#hippies: altaSeguridad a -> nat
		acechar: altaSeguridad a x pos p x pos cp -> pos
		bloqueo?: altaSeguridad a x pos p x pos cp -> bool
		capturasDeAgente: altaSeguridad a x nat id -> nat
		conjCapturas: altaSeguridad a x nat id -> conj(nat,nat) 
		conjPosAgentes: d_agentes -> conj(pos)
		disponibles: altaSeguridad a -> conj(pos)
		hippiesAEliminar: altaSeguridad a x pos p x conj(pos) cp -> conj(pos)
		masCercano: altaSeguridad a x pos p x pos cp -> pos
		masVigilante: altaSeguridad a -> nat
		movimientosPosibles: altaSeguridad a x pos p -> conj(pos)
		posicionAgentes: altaSeguridad a -> conj(pos)
		posicionAgentes': d_agentes d -> conj(pos)
		posicionDeAgente: altaSeguridad a x nat n -> pos
		posicionesAdyacentes: pos p -> conj(pos)
		posIngreso : altaSeguridad a x pos p -> bool
		puedeSalir: altaSeguridad a x pos pi x pos pf -> bool
		reDefinirDiccAg: no x se x que x poner x acá -> Lucho help
		rodeadoDeAS: altaSeguridad a x pos p -> bool
		rodeadoDeEstudiantes: altaSeguridad a x pos p -> bool
		rodeadoDeHippies: altaSeguridad a x pos p -> bool b
		sancionesDeAgente: altaSeguridad a x nat id -> nat
		tieneMasCapturas: conj(nat,nat) -> (nat,nat)

	Axiomas
		(\forall a: altaSeguridad) (\forall r: rastrillaje) 
		(\forall ca: d_agentes) (\forall p,pi,pf: pos) (\forall id,n: nat)
		(\forall c: conj(nat,nat))
	
		obtenerAgentes(iniciar(r,ca))		= ca
		obtenerAgentes(ingresarEstudiante(a,p)) = obtenerAgentes(a)
		obtenerAgentes(ingresarHippie(a,p)) 	= obtenerAgentes(a)
		obtenerAgentes(moverEstudiante(a,pi,pf))= obtenerAgentes(a)
		obtenerAgentes(moverHippie(a,pi)) 	= obtenerAgentes(a)
		obtenerAgentes(moverAS(a,id)) 		= if bloqueo?(moverAS(a,id), posicionesAdyacentes(acechar(posicionDeAgente(a,id), posicionHippies(a)) \ interseccion posicionHippies(a)) then
								if bloqueo?(moverAS(a,id), posicionesAdyacentes(acechar(posicionDeAgente(a,id),posicionEstudiantes(a) \interseccion posicionesEstudiantes(a)) then
									reDefinirDiccAg(a,participantes(a,acechar(a, posicionDeAgente(a,id),posicionHippies(a) ))),1,1, obtenerAgentes(a))
								else    reDefinirDiccAg(a,participantes(moverAS(a,id),acechar(a, posicionDeAgente(a,id),posicionHippies(a) ))),1,0, obtenerAgentes(a)) fi
							  else 	if bloqueo?(moverAS(a,id),posicionesAdyacentes(acechar((posicionDeAgente(a,id),posicionHippies(a)))) /interseccion posicionEstudiantes(a)) then
									reDefinirDiccAg(a,participantes(a,acechar(a, posicionDeAgente(a,id),posicionHippies(a) ))),0,1,obtenerAgentes(a))
								 else def(id,(acechar(a,posicionDeAgente(a,id),posicionHippies(a)) , capturas(a,id) , sanciones(a,id) ),obtenerAgentes(a)) fi
							fi
		
		posicionEstudiantes(iniciar(r,ca))		= {}
		posicionEstudiantes(ingresarEstudiante(a,p))	= if rodeadoDeHippies(p) then posicionEstudiantes(a) else Ag(p,posicionEstudiantes(a)) fi
		posicionEstudiantes(ingresarHippie(a,p))	= if rodeadoDeEstudiantes(p) then Ag(p,posicionEstudiantes(a)) else posicionEstudiantes(a) fi
		posicionEstudiantes(moverEstudiante(a,pi,pf))	= if rodeadoDeHippies(pf) v puedeSalir(a,pi,pf) then posicionEstudiantes(a) else Ag(pf,posicionEstudiantes(a)-{pi}) U losHippiesRodeados(moverEstudiante(a,pi,pf),posicionesAdyacentes(pf) \interseccion posicionHippies(a)) fi
		posicionEstudiantes(moverHippie(a,pi))		= posicionEstudiantes(a) - (if bloqueo?(a,acechar(a,pi,posicionEstudiantes(a)),posicionesAdyacentes(a,acechar(a,pi,posicionEstudiantes(a)) \interseccion posicionEstudiantes(a))
												else {}
		posicionEstudiantes(moverAS(a,id))		= posicionEstudiantes(a)
		
		posicionHippies(iniciar(r,ca))			= {} 
		posicionHippies(ingresarEstudiante(a,p))	= if rodeadoDeHippies(a,p) then Ag(p,posicionHippies(a)) else posicionHippies(a) fi
		posicionHippies(ingresarHippie(a,p))		= if rodeadoDeEstudiantes(a,p) v rodeadoDeAS(a,p) then posicionHippies(a) else Ag(p,posicionHippies(a)) fi
		posicionHippies(moverEstudiante(a,pi,pf))	= if rodeadoDeHippies(a,pf) then Ag(pf,posicionHippies(a)) else posicionHippies(a) - losHippiesRodeados(moverEstudiante(a,pi,pf),posicionesAdyacentes(pf) \inteseccion posicionHippies(a)) fi 
		posicionHippies(moverHippie(a,pi))		= Ag(acechar(a,pi,posicionEstudiantes(a)),(posicionHippies(a) - {pi}))
		posicionHippies(moverAS(a,id))			= posicionesDeHippies(a) - hippiesAEliminar(a,sechar(a,posicionDeAgente(a,id),posicionHippies(a)),posicionesAdyacentes(acechar(a,posicionDeAgente(a,id),posicionHippies(a)))) \interseccion posicionesDeHippies(a))
		
		rastrillaje(iniciar(r,ca))		= r
		rastrillaje(ingresarEstudiante(a,p))	= rastrillaje(a)
		rastrillaje(ingresarHippie(a,p))	= rastrillaje(a)
		rastrillaje(moverEstudiante(a,pi,pf))	= rastrillaje(a)
		rastrillaje(moverHippie(a,pi))		= rastrillaje(a)
		rastrillaje(moverAS(a,pi))		= rastrillaje(a)
		
		#estudiantes(a)				= #posicionEstudiantes(a)
		
		#hippies(a)				= #posicionHippies(a)
		
		losHippiesRodeados(a,cjh) = if vacio?(cjh) then {} 
						else if rodeadoDeEstudiantes(a,dameUno(cjh)) then Ag(dameUno(cjh),losHippiesRodeados(a,sinUno(cjh)))
							else loshippiesRodeados(a,SinUno(cjh)) fi fi
		
		acechar(a,p,cp) = if vacio?(cp) then masCercano(a,p,salidas(rastrillaje(a))-disponibles(a))
						else masCercano(a,p,cp) fi
		
		bloqueo?(a,p,cp) = if vacio?(cp) then false else (vacio?(movimientosPosibles(a, dameUno(cp)) v bloqueo?(a,p,sinUno(cp))) fi
		
		capturasDeAgente(a,id) 	= pi_2(obtener(n,obtenerAgentes(a)))
		
		conjCapturas(a,n)	=	if (¬ def?(n)) then
							{}
						else
							(n,capturasDeAgente(a,n)) u conjCapturas(a,n+1)
						fi
		
		conjPosAgentes(d) = if vacio?(d) then {} else prim(dameUno(d)) u conjPosAgentes(sinUno(d))
		
		disponibles(a)				= libres(rastrillaje(a)) - posicionEstudiantes(a) - posicionHippies(a) - posicionAgentes(a)
		
		hippiesAEliminar(a,p,cp) = if vacio?(movimientosPosibles(a,dameUno(cp)) - {p}) then
						Ag(dameUno(cp),hippiesAEliminar(a,p,sinUno(cp)))
					else
						hippiesAEliminar(a,p,sinUno(cp))
					fi
		
		masCercano(a,p,cp) = menorDistancia(rastrillaje(a),menorDistancia(rastrillaje(a),p,cp),movimientosPosibles(a,p)))
		
		masVigilante(a) 	=	pi_1(tieneMasCapturas(conjCapturas(a,1)))
		
		movimientosPosibles (a,p)		= posicionesAdyacentes(p)\intersección disponibles(a)
		
		posicionAgentes(a) 	= 	posicionAgentes'(obtenerAgentes(a))
		
		posicionAgentes'(d) = 	if vacio?(claves(d))
						then {}
					else
						Ag(pi_1(obtener(dameUno(claves(d)))),posicionAgentes'(borrar(dameUno(claves(d))),d))
		
		posicionDeAgente(a,id) 	= pi_1(obtener(n,obtenerAgentes(a)))
		
		posicionesAdyacentes(p) 		= {(pi_1(p)+1,pi_2(p)), (pi_1(p)-1,pi_2(p)), (pi_1(p),pi_2(p)+1), (pi_1(p),pi_2(p)-1)}
		
		posIngreso(a,p)				= pi_2(p) == 1 v pi_2(p)== alto(rastrillaje(a))
		
		puedeSalir(a,pi,pf) = posIngreso(a,pi) ^ (pi_2(pf) == 0 v pi_2(pf) == alto(rastrillaje(a))+1)
		
		reDefinirDiccAg(a,cid,cap,san,d)= if vacio?(cid) then obtenerAgentes(a) else redefinirDiccAg(a, sinUno(cid), cap, san, definir(dameUno(cid),(posicionDeAgente(a,dameUno(cid)),capturasDeAgente(a,dameUno(cid))+cap,sancionesDeAgente(a,dameUno(cid))+san), obtenerAgentes(a)))
		
		rodeadoDeAS (a,p) = # (posicionesAdyacentes(a,p) \interseccion posicionAgentes(a)) >=1 ^ vacio?(movimientosPosibles(a,p))
		
		rodeadoDeEstudiantes(a,p) = (posicionesAdyacentes(a,p) \interseccion generarPosiciones(a)) \contenido posicionEstudiantes(a) ^ vacio?(movimientosPosibles(a,p))
		
		rodeadoDeHippies(a,p) 	= #(posicionesAdyacentes(a,p) \interseccion posicionHippies(a)) >= 2
		
		sancionesDeAgente(a,id) = pi_3(obtener(n,obtenerAgentes(a)))				//-> nat sanciones
		
		tieneMasCapturas(c) = 	if (#c==2) then
						if pi_2(dameUno(c)) >= pi_2(dameUno(sinUno(c))) then
							if pi_2(dameUno(c)) == pi_2(dameUno(sinUno(c))) then
								if pi_1(dameUno(c)) < pi_1(dameUno(sinUno(c))) then dameUno(c) else dameUno(sinUno(c)) fi
							else
								dameUno(c)
							fi
						else
							dameUno(sinUno(c))
						fi
					else
						if pi_2(dameUno(c)) >= pi_2(dameUno(sinUno(c))) then
							if pi_2(dameUno(c)) == pi_2(dameUno(sinUno(c))) then
								if pi_1(dameUno(c)) < pi_1(dameUno(sinUno(c))) then tieneMasSanciones(dameUno(c) u sinUno(sonUno(c))) else tieneMasSanciones(dameUno(sinUno(c)) u sinUno(sinUno(c))) fi
							else
								tieneMasSanciones(dameUno(c) u sinUno(sonUno(c)))
							fi
						else
							tieneMasSanciones(dameUno(sinUno(c)) u sinUno(sinUno(c)))
						fi
					fi

Fin TAD

TAD Rastrillaje
	Generos
		rastrillaje
	Igualdad observacional
		(\forall r,r': rastrillaje) ( r = obs r' \Leftrightarrow 
			(
			ostaculos(r) =obs obstaculos(r') ^
			alto(r) =obs alto(r') ^
			ancho(r) =obs ancho(r')
			))
	Usa
		nat, Bool 
	Exporta
		rastrillaje, generadores, observadores, libres, distancia
		
	Generadores
		rastrillar: nat ancho x nat altura x conj(pos) conjObs -> rastrillaje	{ancho>0 ^ alto >0 ^ (/forall x:pos) x \in conjObs => 1<= pi_1x <= ancho ^ 1<= pi_2x <= alto}
	
	Observadores basicos
		alto : rastrillaje -> nat
		ancho : rastrillaje -> nat
		obstaculos: rastrillaje -> conj(pos) conjObs
	
	Otras operaciones
		distancia: nat a x nat b -> nat c
		distanciaRectilinea : rastrillaje r x pos p1 x pos p2 -> nat n
		generarPosiciones : rastrillaje r x nat i x nat j -> conj(pos) { 0 <= i <= ancho(r), 0 <= j <= alto(r) }
		libres: rastrillaje -> conj(pos)
		menorDistancia: rastrillaje r x pos p x conj(pos) conQ -> pos q		{p \in generarPosiciones(r,ancho(r),alto(r)) ^ (\forall q: pos) (q \in conQ => q \in generarPosiciones(r,ancho(r),alto(r)))}
		salidas: rastrillaje r x nat i -> conj(pos) {1 <= i <= ancho(r)}
	
	Axiomas 
		(forall r:rastrillaje) (forall i,j,a,h: nat) (forall p,q: pos) (forall co:conj(pos) 
		
		alto (rastrillar(a,h,co))	= h
		
		ancho (rastrillar (a, h, co)) 	= a
		
		obstaculos(rastrillar(a,h,co))	= co
		
		distancia(i,j) = if i >= j then i-j else j-i fi
		
		distanciaRectilinea(r,p,q) = distancia(distancia(pi_1(p),pi_1(q)),distancia(pi_1(p),pi_1(q)))
		
		generarPosiciones(r, i, j) 		= if(i>0)then
								if (j>0) then
									Ag((i,j),generarPosiciones(r,i, j-1))
								else 
									Ag((i,j),generarPosiciones(r,i-1,j))
							else 
								{}
		
		libres(r)				= generarPosiciones(r,ancho(r),alto(r)) - obstaculos(r)  	
		
		menorDistancia(r,p,conQ)) =    if vacio?(conQ) then 
							p 
						else
					        	if #conQ > 1 then 
								menor(distanciaRectilinea(r,p,dameUno(conQ)),menorDistancia(r,p,sinUno(conQ)))
							else
								dameUno(conQ)
							fi
						fi
						fi
		
		salidas(r,i) = if i == 1 then Ag((1,1),Ag((1,alto(r)),vacio)) else Ag((i,1),Ag((i,alto(r)),salidas(r,i-1)))
Fin TAD
