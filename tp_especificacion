TAD D_agentes es Diccionario(nat,tupla(pos,nat,nat)) 	
TAD Pos es tupla (nat,nat)

TAD AS’s
	Generos
		altaSeguridad
	Igualdad observacional
	Usa
		nat, bool 
	Exporta

	Observadores basicos
		rastrillaje: altaSeguridad a -> rastrillaje r
		obtenerAgentes:	altaSeguridad a -> d_agentes 
		posicionEstudiantes: altaSeguridad a -> conj(pos) c
		posicionHippies: altaSeguridad a -> conj(pos) c
		

	Generadores
		iniciar: rastrillaje r x d_agentes d -> altaSeguridad	{#conjAgentes = #agentes(r) ^l conjPosAgentes \subseteq libres(r)}
		ingresarEstudiante: altaSeguridad a x pos p -> altaSeguridad	{p \in disponibles(a) ^ posIngreso(a,p)}
		ingresarHippie: altaSeguridad a x pos p -> altaSeguridad	{p \in disponibles(a) ^ posIngreso(a,p)}
		moverEstudiante: altaSeguridad a x pos pi x pos pf-> altaSeguridad a2     {pi \in posicionEstudiantes(a) ^ (pf \in movimientosPosibles(a,pi) v puedeSalir(a,pi,pf))}
		moverHippie: altaSeguridad a x pos pi -> altaseguridad a2	{pi \in posicionHippies(a) ^ not vacio?(movimientosPosibles(a,pi))}
		moverAS: altaseguridad a x nat id -> altaseguridad a2		{id \in claves(obtenerAgentes(a)) ^ not vacio?(movimientosPosibles(a,posicionDeAgente(a,id))) ^ sancionesDeAgente(a,id) <= 3}
	
	
	Otras operaciones

		posicionAgentes: altaSeguridad a -> conj(pos)
		posicionDeAgente: altaSeguridad a x nat n -> pos p
		capturasDeAgente: altaSeguridad a x nat id -> nat kills
		sancionesDeAgente: altaSeguridad a x nat id -> nat sanciones
		masVigilante: altaSeguridad a -> nat id
		disponibles: altaSeguridad a -> conj(pos)
		movimientosPosibles: altaSeguridad a x pos p -> conj(pos)
		posIngreso : altaSeguridad a x pos p -> bool
		#estudiantes: altaSeguridad a -> nat n
		#hippies: altaSeguridad a -> nat n
		extender: altaSeduridad a -> altaSeguridad a

	Axiomas
		rastrillaje(iniciar(r,d))		= r
		rastrillaje(ingresarEstudiante(a,p))	= rastrillaje(a)
		rastrillaje(ingresarHippie(a,p))	= rastrillaje(a)
		rastrillaje(moverEstudiante(a,pi,pf))	= rastrillaje(a)
		rastrillaje(moverHippie(a,pi))		= rastrillaje(a)
		rastrillaje(moverAS(a,pi))		= rastrillaje(a)
		
		
		obtenerAgentes(iniciar(r,d))		= d
		obtenerAgentes(ingresarEstudiante(a,p)) = obtenerAgentes(a)
		obtenerAgentes(ingresarHippie(a,p)) 	= obtenerAgentes(a)
		obtenerAgentes(moverEstudiante(a,pi,pf))= obtenerAgentes(a)
		obtenerAgentes(moverHippie(a,pi)) 	= obtenerAgentes(a)
		obtenerAgentes(moverAS(a,id)) 		= if bloqueo?(moverAS(a,id), posicionesAdyacentes(acechar(posicionDeAgente(a,id), posicionHippies(a)) \ interseccion posicionHippies(a)) then
								if bloqueo?(moverAS(a,id), posicionesAdyacentes(acechar(posicionDeAgente(a,id),posicionEstudiantes(a) \interseccion posicionesEstudiantes(a)) then
									reDefinirDiccAg(a,participantes(a,acechar(a, posicionDeAgente(a,id),posicionHippies(a) ))),1,1, obtenerAgentes(a))
								else    reDefinirDiccAg(a,participantes(moverAS(a,id),acechar(a, posicionDeAgente(a,id),posicionHippies(a) ))),1,0, obtenerAgentes(a)) fi
							  else 	if bloqueo?(moverAS(a,id),posicionesAdyacentes(acechar((posicionDeAgente(a,id),posicionHippies(a)))) /interseccion posicionEstudiantes(a)) then
									reDefinirDiccAg(a,participantes(a,acechar(a, posicionDeAgente(a,id),posicionHippies(a) ))),0,1,obtenerAgentes(a))
								 else def(id,(acechar(a,posicionDeAgente(a,id),posicionHippies(a)) , capturas(a,id) , sanciones(a,id) ),obtenerAgentes(a)) fi
							fi	
		
		posicionEstudiantes(iniciar(r,d))		= {}  //creo que no hace falta
		posicionEstudiantes(ingresarEstudiante(a,p))	= if rodeadoDeHippies(p) then posicionEstudiantes(a) else Ag(p,posicionEstudiantes(a)) fi    //contar(H,a,p) >= 2
		posicionEstudiantes(ingresarHippie(a,p))	= if rodeadoDeEstudiantes(p) then Ag(p,posicionEstudiantes(a)) else posicionEstudiantes(a) fi
		posicionEstudiantes(moverEstudiante(a,pi,pf))	= if rodeadoDeHippies(pf) v puedeSalir(a,pi,pf) then posicionEstudiantes(a) else Ag(pf,posicionEstudiantes(a)-{pi}) fi
		posicionEstudiantes(moverHippie(a,pi))		= posicionEstudiantes(a) - estudiantesAdyAmenazados(a,acechar(a,pi,posicionEstudiantes(a)))
		posicionEstudiantes(moverAS(a,id))		= posicionEstudiantes(a)
		
		
		posicionHippies(iniciar(r,d))			= {} //creo q no hace falta
		posicionHippies(ingresarEstudiante(a,p))	= if rodeadoDeHippies(a,p) then Ag(p,posicionHippies(a)) else posicionHippies(a) fi
		posicionHippies(ingresarHippie(a,p))		= if rodeadoDeEstudiantes(a,p) v rodeadoDeAS(a,p) then posicionHippies(a) else Ag(p,posicionHippies(a)) fi
		posicionHippies(moverEstudiante(a,pi,pf))	= if rodeadoDeHippies(pf) then Ag(pf,posicionHippies(a)) else posicionHippies(a) fi 
		posicionHippies(moverHippie(a,pi))		= Ag(acechar(a,pi,posicionEstudiantes(a)),(posicionHippies(a) - {pi}))
		posicionHippies(moverAS(a,id))			= posicionesDeHippies(a) - hippiesAEliminar(a,sechar(a,posicionDeAgente(a,id),posicionHippies(a)),posicionesAdyacentes(acechar(a,posicionDeAgente(a,id),posicionHippies(a)))) \interseccion posicionesDeHippies(a))
		
		hippiesAEliminar(a,p,cp) = if vacio?(movimientosPosibles(a,dameUno(cp)) - {p}) then
						Ag(dameUno(cp),hippiesAEliminar(a,p,sinUno(cp)))
					else
						hippiesAEliminar(a,p,sinUno(cp))
					fi
		
		acechar(a,p,cp) = if vacio?(cp) then masCercano(a,p,salidas(rastrillaje(a))-disponibles(a))
						else masCercano(a,p,cp) fi
		
		masCercano(a,p,cp) = menorDistancia(rastrillaje(a),menorDistancia(rastrillaje(a),p,cp),movimientosPosibles(a,p)))
		
		
		posIngreso(a,p)		= (( 1<= pi_1(p) <= ancho(rastrillaje(a)) ^ 1==pi_2(p) ) v ( 1<= pi_1(p) <= ancho(rastrillaje(a)) ^ alto(rastrillaje(a))==pi_2(p) ))
		posicionAgentes(a,n) 	= 	if (n==0) then ///tomo que los agentes se empiezan a contar desde 1 por ser nat
							{}
						else 
							posicionDeAgente(a,n) u posicionAgentes(a,n-1)
						fi
		posicionDeAgente(a,id) 	= pi_1(obtener(n,obtenerAgentes(a)))
		capturasDeAgente(a,id) 	= pi_2(obtener(n,obtenerAgentes(a)))				//-> nat kills
		sancionesDeAgente(a,id) = pi_3(obtener(n,obtenerAgentes(a)))				//-> nat sanciones
		masVigilante(a) 	=	pi_1(tieneMasCapturas(conjCapturas(a,1)))		//-> nat id
		conjCapturas(a,n)	=	if (¬ def?(n)) then
							{}
						else
							(n,capturasDeAgente(a,n)) u conjCapturas(a,n+1)
						fi
		tieneMasCapturas(c) = 	if (#c==2) then
						if pi_2(dameUno(c)) >= pi_2(dameUno(sinUno(c))) then
							if pi_2(dameUno(c)) == pi_2(dameUno(sinUno(c))) then
								if pi_1(dameUno(c)) < pi_1(dameUno(sinUno(c))) then dameUno(c) else dameUno(sinUno(c)) fi
							else
								dameUno(c)
							fi
						else
							dameUno(sinUno(c))
						fi
					else
						if pi_2(dameUno(c)) >= pi_2(dameUno(sinUno(c))) then
							if pi_2(dameUno(c)) == pi_2(dameUno(sinUno(c))) then
								if pi_1(dameUno(c)) < pi_1(dameUno(sinUno(c))) then tieneMasSanciones(dameUno(c) u sinUno(sonUno(c))) else tieneMasSanciones(dameUno(sinUno(c)) u sinUno(sinUno(c))) fi
							else
								tieneMasSanciones(dameUno(c) u sinUno(sonUno(c)))
							fi
						else
							tieneMasSanciones(dameUno(sinUno(c)) u sinUno(sinUno(c)))
						fi
					fi
		disponibles(a)				= libres(rastrillaje(a)) - posicionEstudiantes(a) - posicionHippies(a) - posicionAgentes(a)
		movimientosPosibles (a,p)		= {(pi_1(p)+1,pi_2(p)), (pi_1(p)-1,pi_2(p)), (pi_1(p),pi_2(p)+1), (pi_1(p),pi_2(p)-1)}	\intersección disponibles(a)
		posIngreso(a,p)				= pi_2(p) == 1 v pi_2(p)== alto(rastrillaje(a))
		#estudiantes(a)				= #posicionEstudiantes(a)
		#hippies(a)				= #posicionHippies(a)
		
		bloqueo?(p,cp) = ¬ vacio?(movimientosPosibles(a,p)) // la aridad de bloqueo es incorrecta en las funciones entonces?
		
		reDefinirDiccAg(a,cid,cap,san)= if vacio?(cid) then obtenerAgentes(a) else redefinirDiccAg(a, sinUno(cid), cap, san, definir(dameUno(cid),(posicionDeAgente(a,dameUno(cid)),capturasDeAgente(a,dameUno(cid))+cap,sancionesDeAgente(a,dameUno(cid))+san), obtenerAgentes(a))) {¬vacio?(dameUno(cid))}
	
		puedeSalir(a,pi,pf) = posIngreso(a,pi) ^ (pi_2(pf) == 0 v pi_2(pf) == alto(rastrillaje(a))+1)
		
FIn TAD

TAD Rastrillaje
	Generos
		rastrillaje
	Igualdad observacional
	Usa
		nat, Bool 
	Exporta
	Generadores
		rastrillar: nat ancho x nat altura x conj(pos) conjObs -> rastrillaje	{ancho>0 ^ alto >0 ^ (/forall x:pos) x \in conjObs => 1<= pi_1x <= ancho ^ 1<= pi_2x <= alto}

	Observadores basicos
		obstaculos: rastrillaje -> conj(pos) conjObs
		alto : rastrillaje -> nat
		ancho : rastrillaje -> nat

	Otras operaciones
		libres: rastrillaje -> conj(pos)
		generarPosiciones : rastrillaje r x nat i x nat j -> conj(pos) { 0 <= i <= ancho(r), 0 <= j <= alto(r) }
		salidas: rastrillaje r x nat i -> conj(pos) {1 <= i <= ancho(r)}
		distanciaRectilinea : rastrillaje r x pos p1 x pos p2 -> nat n
		distancia: nat a x nat b -> nat c
		menorDistancia: rastrillaje r x pos p x conj(pos) conQ -> pos q		{p \in generarPosiciones(r,ancho(r),alto(r)) ^ (\forall q: pos) (q \in conQ => q \in generarPosiciones(r,ancho(r),alto(r)))}
	
	Axiomas (forall r:rastrillaje) (forall i,j,a,h: nat) (forall p,q: pos) (forall co:conj(pos) 
		obstaculos(rastrillar(a,h,co))	= co
		alto (rastrillar(a,h,co))	= h
		ancho (rastrillar (a, h, co)) 	= a
		libres(r)				= generarPosiciones(r,ancho(r),alto(r)) - obstaculos(r)  	
		generarPosiciones(r, i, j) 		= if(i>0)then
								if (j>0) then
									Ag((i,j),generarPosiciones(r,i, j-1))
								else 
									Ag((i,j),generarPosiciones(r,i-1,j))
							else 
								{}
		salidas(r,i) = if i == 1 then Ag((1,1),Ag((1,alto(r)),vacio)) else Ag((i,1),Ag((i,alto(r)),salidas(r,i-1)))
		distanciaRectilinea(r,p,q)= distancia(distancia(pi_1(p),pi_1(q)),distancia(pi_1(p),pi_1(q)))
		distancia(i,j) = if i >= j then i-j else j-i fi
		menorDistancia(r,p,conQ)) =    if vacio?(conQ) then p else
					        (if #conQ > 1 then 
						menor(distanciaRectilinea(r,p,dameUno(conQ)),menorDistancia(r,p,sinUno(conQ)))
						else
						dameUno(conQ)
						fi)
						fi
Fin TAD
