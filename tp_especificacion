TAD D_agentes es Diccionario(nat,tupla(pos,nat,nat)) 	
TAD Pos es tupla (nat,nat)

TAD AS’s
	Generos
		altaSeguridad
	Igualdad observacional
	Usa
		nat, bool 
	Exporta

	Observadores basicos
		rastrillaje: altaSeguridad a -> rastrillaje r
		obtenerAgentes:	altaSeguridad a -> d_agentes 
		posicionEstudiantes: altaSeguridad a -> conj(pos) c
		posicionHippies: altaSeguridad a -> conj(pos) c
		

	Generadores
		iniciar: rastrillaje r x d_agentes d -> altaSeguridad	{#conjAgentes = #agentes(r) ^l conjPosAgentes \subseteq libres(r)}
		ingresarEstudiante: altaSeguridad a x pos p -> altaSeguridad	{p \in disponibles(a) ^ posIngreso(a,p)}
		ingresarHippie: altaSeguridad a x pos p -> altaSeguridad	{p \in disponibles(a) ^ posIngreso(a,p)}
		moverEstudiante: altaSeguridad a x pos pi x pos pf-> altaSeguridad a2     {pi \in posicionEstudiantes(a) ^ pf \in movimientosPosibles(a,pi)}
		moverHippie: altaSeguridad a x pos pi -> altaseguridad a2	{pi \in posicionHippies(a) ^ not vacio?(movimientosPosibles(a,pi))}
		moverAS: altaseguridad a x nat id -> altaseguridad a2		{id \in claves(obtenerAgentes(a)) ^ not vacio?(movimientosPosibles(a,posicionDeAgente(a,id)))}
	
	
	Otras operaciones

		posicionAgentes: altaSeguridad a -> conj(pos)
		posicionDeAgente: altaSeguridad a x nat n -> pos p
		capturasDeAgente: altaSeguridad a x nat id -> nat kills
		sancionesDeAgente: altaSeguridad a x nat id -> nat sanciones
		masVigilante: altaSeguridad a -> nat id
		conjCapturas: altaSeguridad a x nat id -> conj(nat,nat) 
		tieneMasCapturas: conj(nat,nat) -> (nat,nat)
		disponibles: altaSeguridad a -> conj(pos)
		movimientosPosibles: altaSeguridad a x pos p -> conj(pos)
		posIngreso : altaSeguridad a x pos p -> bool
		#estudiantes: altaSeguridad a -> nat n
		#hippies: altaSeguridad a -> nat n

	Axiomas
		rastrillaje(iniciar(r,d))		= r
		rastrillaje(ingresarEstudiante(a,p))	= rastrillaje(a)
		rastrillaje(ingresarHippie(a,p))	= rastrillaje(a)
		rastrillaje(moverEstudiante(a,pi,pf))	= rastrillaje(a)
		rastrillaje(moverHippie(a,pi))		= rastrillaje(a)
		rastrillaje(moverAS(a,pi))		= rastrillaje(a)
		
		
		obtenerAgentes(iniciar(r,d))		= d
		obtenerAgentes(ingresarEstudiante(a,p)) = obtenerAgentes(a)
		obtenerAgentes(ingresarHippie(a,p)) 	= obtenerAgentes(a)
		obtenerAgentes(moverEstudiante(a,pi,pf))= obtenerAgentes(a)
		obtenerAgentes(moverHippie(a,pi)) 	= obtenerAgentes(a)
		obtenerAgentes(moverAS(a,id)) 		= definir(id, funcion que dejamo' para depue' , obtenerAgentes(a))
		
		posicionEstudiantes(iniciar(r,d))		= {}
		pocisionEstudiantes(ingresarEstudiante(a,p))	= Comportamiento automático (lo dejamo' para depue' :v)
		pocisionEstudiantes(ingresarHippie(a,p))	= Comportamiento automático (lo dejamo' para depue' :v)
		pocisionEstudiantes(moverEstudiante(a,pi,pf))	= Comportamiento automático (lo dejamo' para depue' :v)
		pocisionEstudiantes(moverHippie(a,pi))		= Comportamiento automático (lo dejamo' para depue' :v)
		pocisionEstudiantes(moverAS(a,pi))		= posicionEstudiantes(a)
		
		
		posicionHippies(iniciar(r,d))			= {}
		posicionHippies(ingresarEstudiante(a,p))	= posicionHippies(a)
		posicionHippies(ingresarHippie(a,p))		= Comportamiento automático (lo dejamo' para depue' :v)
		posicionHippies(moverEstudiante(a,pi,pf))	= Comportamiento automático (lo dejamo' para depue' :v)
		posicionHippies(moverHippie(a,pi))		= Comportamiento automático (lo dejamo' para depue' :v)
		posicionHippies(moverAS(a,pi))			= Comportamiento automático (lo dejamo' para depue' :v)
		
		
		
		
		posicionDeAgentes(iniciar(r,ca),id)		= pi_1(obtener(id,obtenerAgente(inciar(r,ca)))
		posicionDeAgente(ingresarEstudiante(a,p),id) 	= pi_1(obtener(id,d_agentes))
		posicionDeAgente(ingresarHippie(a,p),id) 	= pi_1(obtener(id,d_agentes))
		posicionDeAgente(moverEstudiante(a,pi,pf), id) 	= 
		
		(ingresarEstudiante(a,p))
		(ingresarHippie(a,p))
		(moverEstudiante(a,pi,pf))
		(moverHippie(a,pi))
		(moverAS(a,pi))
		
		posIngreso(a,p)		= (( 1<= pi_1(p) <= ancho(rastrillaje(a)) ^ 1==pi_2(p) ) v ( 1<= pi_1(p) <= ancho(rastrillaje(a)) ^ alto(rastrillaje(a))==pi_2(p) ))
		posicionAgentes(a,n) 	= 	if (n==0) then ///tomo que los agentes se empiezan a contar desde 1 por ser nat
							{}
						else 
							posicionDeAgente(a,n) u posicionAgentes(a,n-1)
						fi
		posicionDeAgente(a,id) 	= pi_1(obtener(n,obtenerAgentes(a)))
		capturasDeAgente(a,id) 	= pi_2(obtener(n,obtenerAgentes(a)))				//-> nat kills
		sancionesDeAgente(a,id) = pi_3(obtener(n,obtenerAgentes(a)))				//-> nat sanciones
		masVigilante(a) 	=	pi_1(tieneMasCapturas(conjCapturas(a,1)))		//-> nat id
		conjCapturas(a,n)	=	if (¬ def?(n)) then
							{}
						else
							(n,capturasDeAgente(a,n)) u conjCapturas(a,n+1)
						fi
		tieneMasCapturas(c) = 	if (#c==2) then
						if pi_2(dameUno(c)) >= pi_2(dameUno(sinUno(c))) then
							if pi_2(dameUno(c)) == pi_2(dameUno(sinUno(c))) then
								if pi_1(dameUno(c)) < pi_1(dameUno(sinUno(c))) then dameUno(c) else dameUno(sinUno(c)) fi
							else
								dameUno(c)
							fi
						else
							dameUno(sinUno(c))
						fi
					else
						if pi_2(dameUno(c)) >= pi_2(dameUno(sinUno(c))) then
							if pi_2(dameUno(c)) == pi_2(dameUno(sinUno(c))) then
								if pi_1(dameUno(c)) < pi_1(dameUno(sinUno(c))) then tieneMasSanciones(dameUno(c) u sinUno(sonUno(c))) else tieneMasSanciones(dameUno(sinUno(c)) u sinUno(sinUno(c))) fi
							else
								tieneMasSanciones(dameUno(c) u sinUno(sonUno(c)))
							fi
						else
							tieneMasSanciones(dameUno(sinUno(c)) u sinUno(sinUno(c)))
						fi
					fi
FIn TAD

TAD Rastrillaje
	Generos
		rastrillaje
	Igualdad observacional
	Usa
		nat, Bool 
	Exporta
	Generadores
		rastrillar: nat ancho x nat altura x conj(pos) conjObs -> rastrillaje	{ancho>0 ^ alto >0 ^ (/forall x:pos) x \in conjObs => 1<= pi_1x <= ancho ^ 1<= pi_2x <= alto}

	Observadores basicos
		obstaculos: rastrillaje -> conj(pos) conjObs
		alto : rastrillaje -> nat
		ancho : rastrillaje -> nat

	Otras operaciones
		libres: rastrillaje -> conj(pos)
		generarPosiciones : rastrillaje r x nat i x nat j -> conj(pos) { 0 <= i <= ancho(r), 0 <= j <= alto(r) }
		distanciaRectilinea : rastrillaje r x pos p1 x pos p2 -> nat n
		distancia: nat a x nat b -> nat c
		menorDistancia: rastrillaje r x pos p x conj(pos) conQ -> pos q		{¬vacio?(conQ) ^ p \in generarPosiciones(r,ancho(r),alto(r)) ^ (\forall q: pos) (q \in conQ => q \in generarPosiciones(r,ancho(r),alto(r)))}
	Axiomas (forall r:rastrillaje) (forall i,j,a,h: nat) (forall p,q: pos) (forall co:conj(pos) 
		ostaculos(rastrillar(a,h,co))	= co
		alto (rastrillar(a,h,co))	= h
		ancho (rastrillar (a, h, co)) 	= a
		libres(r)				= generarPosiciones(r,ancho(r),alto(r)) - obstaculos(r)  	
		generarPosiciones(r, i, j) 		= if(i>0)then
								if (j>0) then
									Ag((i,j),generarPosiciones(r,i, j-1))
								else 
									Ag((i,j),generarPosiciones(r,i-1,j))
							else 
								{}
		distanciaRectilinea(r,p,q)= distancia(distancia(pi_1(p),pi_1(q)),distancia(pi_1(p),pi_1(q)))
		distancia(i,j) = if i >= j then i-j else j-i fi
		menorDistancia(r,p,conQ))= if #conQ > 1 then 
						menor(distanciaRectilinea(r,p,dameUno(conQ)),menorDistancia(r,p,sinUno(conQ)))
						else
						dameUno(conQ)
FIn TAD
